//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.3.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Eclipse.Sumo.Libtraci {

public class POI : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal POI(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(POI obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(POI obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~POI() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          libtraciPINVOKE.delete_POI(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public static string getType(string poiID) {
    string ret = libtraciPINVOKE.POI_getType(poiID);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TraCIPosition getPosition(string poiID, bool includeZ) {
    TraCIPosition ret = new TraCIPosition(libtraciPINVOKE.POI_getPosition__SWIG_0(poiID, includeZ), true);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TraCIPosition getPosition(string poiID) {
    TraCIPosition ret = new TraCIPosition(libtraciPINVOKE.POI_getPosition__SWIG_1(poiID), true);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TraCIColor getColor(string poiID) {
    TraCIColor ret = new TraCIColor(libtraciPINVOKE.POI_getColor(poiID), true);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getWidth(string poiID) {
    double ret = libtraciPINVOKE.POI_getWidth(poiID);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getHeight(string poiID) {
    double ret = libtraciPINVOKE.POI_getHeight(poiID);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getAngle(string poiID) {
    double ret = libtraciPINVOKE.POI_getAngle(poiID);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string getImageFile(string poiID) {
    string ret = libtraciPINVOKE.POI_getImageFile(poiID);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static StringVector getIDList() {
    StringVector ret = new StringVector(libtraciPINVOKE.POI_getIDList(), true);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int getIDCount() {
    int ret = libtraciPINVOKE.POI_getIDCount();
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string getParameter(string objectID, string key) {
    string ret = libtraciPINVOKE.POI_getParameter(objectID, key);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static StringStringPair getParameterWithKey(string objectID, string key) {
    StringStringPair ret = new StringStringPair(libtraciPINVOKE.POI_getParameterWithKey(objectID, key), true);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void setParameter(string objectID, string key, string value) {
    libtraciPINVOKE.POI_setParameter(objectID, key, value);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void subscribe(string objectID, IntVector varIDs, double begin, double end, TraCIResults parameters) {
    libtraciPINVOKE.POI_subscribe__SWIG_0(objectID, IntVector.getCPtr(varIDs), begin, end, TraCIResults.getCPtr(parameters));
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void subscribe(string objectID, IntVector varIDs, double begin, double end) {
    libtraciPINVOKE.POI_subscribe__SWIG_1(objectID, IntVector.getCPtr(varIDs), begin, end);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void subscribe(string objectID, IntVector varIDs, double begin) {
    libtraciPINVOKE.POI_subscribe__SWIG_2(objectID, IntVector.getCPtr(varIDs), begin);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void subscribe(string objectID, IntVector varIDs) {
    libtraciPINVOKE.POI_subscribe__SWIG_3(objectID, IntVector.getCPtr(varIDs));
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void subscribe(string objectID) {
    libtraciPINVOKE.POI_subscribe__SWIG_4(objectID);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void unsubscribe(string objectID) {
    libtraciPINVOKE.POI_unsubscribe(objectID);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void subscribeContext(string objectID, int domain, double dist, IntVector varIDs, double begin, double end, TraCIResults parameters) {
    libtraciPINVOKE.POI_subscribeContext__SWIG_0(objectID, domain, dist, IntVector.getCPtr(varIDs), begin, end, TraCIResults.getCPtr(parameters));
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void subscribeContext(string objectID, int domain, double dist, IntVector varIDs, double begin, double end) {
    libtraciPINVOKE.POI_subscribeContext__SWIG_1(objectID, domain, dist, IntVector.getCPtr(varIDs), begin, end);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void subscribeContext(string objectID, int domain, double dist, IntVector varIDs, double begin) {
    libtraciPINVOKE.POI_subscribeContext__SWIG_2(objectID, domain, dist, IntVector.getCPtr(varIDs), begin);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void subscribeContext(string objectID, int domain, double dist, IntVector varIDs) {
    libtraciPINVOKE.POI_subscribeContext__SWIG_3(objectID, domain, dist, IntVector.getCPtr(varIDs));
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void subscribeContext(string objectID, int domain, double dist) {
    libtraciPINVOKE.POI_subscribeContext__SWIG_4(objectID, domain, dist);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void unsubscribeContext(string objectID, int domain, double dist) {
    libtraciPINVOKE.POI_unsubscribeContext(objectID, domain, dist);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
  }

  public static SubscriptionResults getAllSubscriptionResults() {
    SubscriptionResults ret = new SubscriptionResults(libtraciPINVOKE.POI_getAllSubscriptionResults(), true);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TraCIResults getSubscriptionResults(string objectID) {
    TraCIResults ret = new TraCIResults(libtraciPINVOKE.POI_getSubscriptionResults(objectID), true);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ContextSubscriptionResults getAllContextSubscriptionResults() {
    ContextSubscriptionResults ret = new ContextSubscriptionResults(libtraciPINVOKE.POI_getAllContextSubscriptionResults(), true);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SubscriptionResults getContextSubscriptionResults(string objectID) {
    SubscriptionResults ret = new SubscriptionResults(libtraciPINVOKE.POI_getContextSubscriptionResults(objectID), true);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void subscribeParameterWithKey(string objectID, string key, double beginTime, double endTime) {
    libtraciPINVOKE.POI_subscribeParameterWithKey__SWIG_0(objectID, key, beginTime, endTime);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void subscribeParameterWithKey(string objectID, string key, double beginTime) {
    libtraciPINVOKE.POI_subscribeParameterWithKey__SWIG_1(objectID, key, beginTime);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void subscribeParameterWithKey(string objectID, string key) {
    libtraciPINVOKE.POI_subscribeParameterWithKey__SWIG_2(objectID, key);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int DOMAIN_ID {
    get {
      int ret = libtraciPINVOKE.POI_DOMAIN_ID_get();
      if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int domainID() {
    int ret = libtraciPINVOKE.POI_domainID();
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void setType(string poiID, string poiType) {
    libtraciPINVOKE.POI_setType(poiID, poiType);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setColor(string poiID, TraCIColor color) {
    libtraciPINVOKE.POI_setColor(poiID, TraCIColor.getCPtr(color));
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setPosition(string poiID, double x, double y) {
    libtraciPINVOKE.POI_setPosition(poiID, x, y);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setWidth(string poiID, double width) {
    libtraciPINVOKE.POI_setWidth(poiID, width);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setHeight(string poiID, double height) {
    libtraciPINVOKE.POI_setHeight(poiID, height);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setAngle(string poiID, double angle) {
    libtraciPINVOKE.POI_setAngle(poiID, angle);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setImageFile(string poiID, string imageFile) {
    libtraciPINVOKE.POI_setImageFile(poiID, imageFile);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
  }

  public static bool add(string poiID, double x, double y, TraCIColor color, string poiType, int layer, string imgFile, double width, double height, double angle, string icon) {
    bool ret = libtraciPINVOKE.POI_add__SWIG_0(poiID, x, y, TraCIColor.getCPtr(color), poiType, layer, imgFile, width, height, angle, icon);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool add(string poiID, double x, double y, TraCIColor color, string poiType, int layer, string imgFile, double width, double height, double angle) {
    bool ret = libtraciPINVOKE.POI_add__SWIG_1(poiID, x, y, TraCIColor.getCPtr(color), poiType, layer, imgFile, width, height, angle);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool add(string poiID, double x, double y, TraCIColor color, string poiType, int layer, string imgFile, double width, double height) {
    bool ret = libtraciPINVOKE.POI_add__SWIG_2(poiID, x, y, TraCIColor.getCPtr(color), poiType, layer, imgFile, width, height);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool add(string poiID, double x, double y, TraCIColor color, string poiType, int layer, string imgFile, double width) {
    bool ret = libtraciPINVOKE.POI_add__SWIG_3(poiID, x, y, TraCIColor.getCPtr(color), poiType, layer, imgFile, width);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool add(string poiID, double x, double y, TraCIColor color, string poiType, int layer, string imgFile) {
    bool ret = libtraciPINVOKE.POI_add__SWIG_4(poiID, x, y, TraCIColor.getCPtr(color), poiType, layer, imgFile);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool add(string poiID, double x, double y, TraCIColor color, string poiType, int layer) {
    bool ret = libtraciPINVOKE.POI_add__SWIG_5(poiID, x, y, TraCIColor.getCPtr(color), poiType, layer);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool add(string poiID, double x, double y, TraCIColor color, string poiType) {
    bool ret = libtraciPINVOKE.POI_add__SWIG_6(poiID, x, y, TraCIColor.getCPtr(color), poiType);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool add(string poiID, double x, double y, TraCIColor color) {
    bool ret = libtraciPINVOKE.POI_add__SWIG_7(poiID, x, y, TraCIColor.getCPtr(color));
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool remove(string poiID, int layer) {
    bool ret = libtraciPINVOKE.POI_remove__SWIG_0(poiID, layer);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool remove(string poiID) {
    bool ret = libtraciPINVOKE.POI_remove__SWIG_1(poiID);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void highlight(string poiID, TraCIColor col, double size, int alphaMax, double duration, int type) {
    libtraciPINVOKE.POI_highlight__SWIG_0(poiID, TraCIColor.getCPtr(col), size, alphaMax, duration, type);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void highlight(string poiID, TraCIColor col, double size, int alphaMax, double duration) {
    libtraciPINVOKE.POI_highlight__SWIG_1(poiID, TraCIColor.getCPtr(col), size, alphaMax, duration);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void highlight(string poiID, TraCIColor col, double size, int alphaMax) {
    libtraciPINVOKE.POI_highlight__SWIG_2(poiID, TraCIColor.getCPtr(col), size, alphaMax);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void highlight(string poiID, TraCIColor col, double size) {
    libtraciPINVOKE.POI_highlight__SWIG_3(poiID, TraCIColor.getCPtr(col), size);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void highlight(string poiID, TraCIColor col) {
    libtraciPINVOKE.POI_highlight__SWIG_4(poiID, TraCIColor.getCPtr(col));
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void highlight(string poiID) {
    libtraciPINVOKE.POI_highlight__SWIG_5(poiID);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
