//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.3.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Eclipse.Sumo.Libtraci {

public class TraCINextStopData : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal TraCINextStopData(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(TraCINextStopData obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~TraCINextStopData() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          libtraciPINVOKE.delete_TraCINextStopData(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public TraCINextStopData(string lane, double startPos, double endPos, string stoppingPlaceID, int stopFlags, double duration, double until, double intendedArrival, double arrival, double depart, string split, string join, string actType, string tripId, string line, double speed) : this(libtraciPINVOKE.new_TraCINextStopData__SWIG_0(lane, startPos, endPos, stoppingPlaceID, stopFlags, duration, until, intendedArrival, arrival, depart, split, join, actType, tripId, line, speed), true) {
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
  }

  public TraCINextStopData(string lane, double startPos, double endPos, string stoppingPlaceID, int stopFlags, double duration, double until, double intendedArrival, double arrival, double depart, string split, string join, string actType, string tripId, string line) : this(libtraciPINVOKE.new_TraCINextStopData__SWIG_1(lane, startPos, endPos, stoppingPlaceID, stopFlags, duration, until, intendedArrival, arrival, depart, split, join, actType, tripId, line), true) {
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
  }

  public TraCINextStopData(string lane, double startPos, double endPos, string stoppingPlaceID, int stopFlags, double duration, double until, double intendedArrival, double arrival, double depart, string split, string join, string actType, string tripId) : this(libtraciPINVOKE.new_TraCINextStopData__SWIG_2(lane, startPos, endPos, stoppingPlaceID, stopFlags, duration, until, intendedArrival, arrival, depart, split, join, actType, tripId), true) {
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
  }

  public TraCINextStopData(string lane, double startPos, double endPos, string stoppingPlaceID, int stopFlags, double duration, double until, double intendedArrival, double arrival, double depart, string split, string join, string actType) : this(libtraciPINVOKE.new_TraCINextStopData__SWIG_3(lane, startPos, endPos, stoppingPlaceID, stopFlags, duration, until, intendedArrival, arrival, depart, split, join, actType), true) {
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
  }

  public TraCINextStopData(string lane, double startPos, double endPos, string stoppingPlaceID, int stopFlags, double duration, double until, double intendedArrival, double arrival, double depart, string split, string join) : this(libtraciPINVOKE.new_TraCINextStopData__SWIG_4(lane, startPos, endPos, stoppingPlaceID, stopFlags, duration, until, intendedArrival, arrival, depart, split, join), true) {
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
  }

  public TraCINextStopData(string lane, double startPos, double endPos, string stoppingPlaceID, int stopFlags, double duration, double until, double intendedArrival, double arrival, double depart, string split) : this(libtraciPINVOKE.new_TraCINextStopData__SWIG_5(lane, startPos, endPos, stoppingPlaceID, stopFlags, duration, until, intendedArrival, arrival, depart, split), true) {
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
  }

  public TraCINextStopData(string lane, double startPos, double endPos, string stoppingPlaceID, int stopFlags, double duration, double until, double intendedArrival, double arrival, double depart) : this(libtraciPINVOKE.new_TraCINextStopData__SWIG_6(lane, startPos, endPos, stoppingPlaceID, stopFlags, duration, until, intendedArrival, arrival, depart), true) {
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
  }

  public TraCINextStopData(string lane, double startPos, double endPos, string stoppingPlaceID, int stopFlags, double duration, double until, double intendedArrival, double arrival) : this(libtraciPINVOKE.new_TraCINextStopData__SWIG_7(lane, startPos, endPos, stoppingPlaceID, stopFlags, duration, until, intendedArrival, arrival), true) {
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
  }

  public TraCINextStopData(string lane, double startPos, double endPos, string stoppingPlaceID, int stopFlags, double duration, double until, double intendedArrival) : this(libtraciPINVOKE.new_TraCINextStopData__SWIG_8(lane, startPos, endPos, stoppingPlaceID, stopFlags, duration, until, intendedArrival), true) {
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
  }

  public TraCINextStopData(string lane, double startPos, double endPos, string stoppingPlaceID, int stopFlags, double duration, double until) : this(libtraciPINVOKE.new_TraCINextStopData__SWIG_9(lane, startPos, endPos, stoppingPlaceID, stopFlags, duration, until), true) {
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
  }

  public TraCINextStopData(string lane, double startPos, double endPos, string stoppingPlaceID, int stopFlags, double duration) : this(libtraciPINVOKE.new_TraCINextStopData__SWIG_10(lane, startPos, endPos, stoppingPlaceID, stopFlags, duration), true) {
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
  }

  public TraCINextStopData(string lane, double startPos, double endPos, string stoppingPlaceID, int stopFlags) : this(libtraciPINVOKE.new_TraCINextStopData__SWIG_11(lane, startPos, endPos, stoppingPlaceID, stopFlags), true) {
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
  }

  public TraCINextStopData(string lane, double startPos, double endPos, string stoppingPlaceID) : this(libtraciPINVOKE.new_TraCINextStopData__SWIG_12(lane, startPos, endPos, stoppingPlaceID), true) {
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
  }

  public TraCINextStopData(string lane, double startPos, double endPos) : this(libtraciPINVOKE.new_TraCINextStopData__SWIG_13(lane, startPos, endPos), true) {
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
  }

  public TraCINextStopData(string lane, double startPos) : this(libtraciPINVOKE.new_TraCINextStopData__SWIG_14(lane, startPos), true) {
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
  }

  public TraCINextStopData(string lane) : this(libtraciPINVOKE.new_TraCINextStopData__SWIG_15(lane), true) {
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
  }

  public TraCINextStopData() : this(libtraciPINVOKE.new_TraCINextStopData__SWIG_16(), true) {
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
  }

  public string getString() {
    string ret = libtraciPINVOKE.TraCINextStopData_getString(swigCPtr);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string lane {
    set {
      libtraciPINVOKE.TraCINextStopData_lane_set(swigCPtr, value);
      if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = libtraciPINVOKE.TraCINextStopData_lane_get(swigCPtr);
      if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public double startPos {
    set {
      libtraciPINVOKE.TraCINextStopData_startPos_set(swigCPtr, value);
      if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      double ret = libtraciPINVOKE.TraCINextStopData_startPos_get(swigCPtr);
      if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public double endPos {
    set {
      libtraciPINVOKE.TraCINextStopData_endPos_set(swigCPtr, value);
      if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      double ret = libtraciPINVOKE.TraCINextStopData_endPos_get(swigCPtr);
      if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string stoppingPlaceID {
    set {
      libtraciPINVOKE.TraCINextStopData_stoppingPlaceID_set(swigCPtr, value);
      if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = libtraciPINVOKE.TraCINextStopData_stoppingPlaceID_get(swigCPtr);
      if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int stopFlags {
    set {
      libtraciPINVOKE.TraCINextStopData_stopFlags_set(swigCPtr, value);
      if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = libtraciPINVOKE.TraCINextStopData_stopFlags_get(swigCPtr);
      if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public double duration {
    set {
      libtraciPINVOKE.TraCINextStopData_duration_set(swigCPtr, value);
      if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      double ret = libtraciPINVOKE.TraCINextStopData_duration_get(swigCPtr);
      if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public double until {
    set {
      libtraciPINVOKE.TraCINextStopData_until_set(swigCPtr, value);
      if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      double ret = libtraciPINVOKE.TraCINextStopData_until_get(swigCPtr);
      if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public double intendedArrival {
    set {
      libtraciPINVOKE.TraCINextStopData_intendedArrival_set(swigCPtr, value);
      if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      double ret = libtraciPINVOKE.TraCINextStopData_intendedArrival_get(swigCPtr);
      if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public double arrival {
    set {
      libtraciPINVOKE.TraCINextStopData_arrival_set(swigCPtr, value);
      if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      double ret = libtraciPINVOKE.TraCINextStopData_arrival_get(swigCPtr);
      if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public double depart {
    set {
      libtraciPINVOKE.TraCINextStopData_depart_set(swigCPtr, value);
      if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      double ret = libtraciPINVOKE.TraCINextStopData_depart_get(swigCPtr);
      if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string split {
    set {
      libtraciPINVOKE.TraCINextStopData_split_set(swigCPtr, value);
      if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = libtraciPINVOKE.TraCINextStopData_split_get(swigCPtr);
      if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string join {
    set {
      libtraciPINVOKE.TraCINextStopData_join_set(swigCPtr, value);
      if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = libtraciPINVOKE.TraCINextStopData_join_get(swigCPtr);
      if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string actType {
    set {
      libtraciPINVOKE.TraCINextStopData_actType_set(swigCPtr, value);
      if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = libtraciPINVOKE.TraCINextStopData_actType_get(swigCPtr);
      if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string tripId {
    set {
      libtraciPINVOKE.TraCINextStopData_tripId_set(swigCPtr, value);
      if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = libtraciPINVOKE.TraCINextStopData_tripId_get(swigCPtr);
      if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string line {
    set {
      libtraciPINVOKE.TraCINextStopData_line_set(swigCPtr, value);
      if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = libtraciPINVOKE.TraCINextStopData_line_get(swigCPtr);
      if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public double speed {
    set {
      libtraciPINVOKE.TraCINextStopData_speed_set(swigCPtr, value);
      if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      double ret = libtraciPINVOKE.TraCINextStopData_speed_get(swigCPtr);
      if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

}

}
