//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.3.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Eclipse.Sumo.Libtraci {

public class Simulation : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Simulation(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Simulation obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Simulation obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~Simulation() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          libtraciPINVOKE.delete_Simulation(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public static IntStringPair init(int port, int numRetries, string host, string label, SWIGTYPE_p_FILE pipe) {
    IntStringPair ret = new IntStringPair(libtraciPINVOKE.Simulation_init__SWIG_0(port, numRetries, host, label, SWIGTYPE_p_FILE.getCPtr(pipe)), true);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IntStringPair init(int port, int numRetries, string host, string label) {
    IntStringPair ret = new IntStringPair(libtraciPINVOKE.Simulation_init__SWIG_1(port, numRetries, host, label), true);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IntStringPair init(int port, int numRetries, string host) {
    IntStringPair ret = new IntStringPair(libtraciPINVOKE.Simulation_init__SWIG_2(port, numRetries, host), true);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IntStringPair init(int port, int numRetries) {
    IntStringPair ret = new IntStringPair(libtraciPINVOKE.Simulation_init__SWIG_3(port, numRetries), true);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IntStringPair init(int port) {
    IntStringPair ret = new IntStringPair(libtraciPINVOKE.Simulation_init__SWIG_4(port), true);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IntStringPair init() {
    IntStringPair ret = new IntStringPair(libtraciPINVOKE.Simulation_init__SWIG_5(), true);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IntStringPair start(StringVector cmd, int port, int numRetries, string label, bool verbose, string traceFile, bool traceGetters, SWIGTYPE_p_void _stdout) {
    IntStringPair ret = new IntStringPair(libtraciPINVOKE.Simulation_start__SWIG_0(StringVector.getCPtr(cmd), port, numRetries, label, verbose, traceFile, traceGetters, SWIGTYPE_p_void.getCPtr(_stdout)), true);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IntStringPair start(StringVector cmd, int port, int numRetries, string label, bool verbose, string traceFile, bool traceGetters) {
    IntStringPair ret = new IntStringPair(libtraciPINVOKE.Simulation_start__SWIG_1(StringVector.getCPtr(cmd), port, numRetries, label, verbose, traceFile, traceGetters), true);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IntStringPair start(StringVector cmd, int port, int numRetries, string label, bool verbose, string traceFile) {
    IntStringPair ret = new IntStringPair(libtraciPINVOKE.Simulation_start__SWIG_2(StringVector.getCPtr(cmd), port, numRetries, label, verbose, traceFile), true);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IntStringPair start(StringVector cmd, int port, int numRetries, string label, bool verbose) {
    IntStringPair ret = new IntStringPair(libtraciPINVOKE.Simulation_start__SWIG_3(StringVector.getCPtr(cmd), port, numRetries, label, verbose), true);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IntStringPair start(StringVector cmd, int port, int numRetries, string label) {
    IntStringPair ret = new IntStringPair(libtraciPINVOKE.Simulation_start__SWIG_4(StringVector.getCPtr(cmd), port, numRetries, label), true);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IntStringPair start(StringVector cmd, int port, int numRetries) {
    IntStringPair ret = new IntStringPair(libtraciPINVOKE.Simulation_start__SWIG_5(StringVector.getCPtr(cmd), port, numRetries), true);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IntStringPair start(StringVector cmd, int port) {
    IntStringPair ret = new IntStringPair(libtraciPINVOKE.Simulation_start__SWIG_6(StringVector.getCPtr(cmd), port), true);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IntStringPair start(StringVector cmd) {
    IntStringPair ret = new IntStringPair(libtraciPINVOKE.Simulation_start__SWIG_7(StringVector.getCPtr(cmd)), true);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool isLibsumo() {
    bool ret = libtraciPINVOKE.Simulation_isLibsumo();
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void switchConnection(string label) {
    libtraciPINVOKE.Simulation_switchConnection(label);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
  }

  public static string getLabel() {
    string ret = libtraciPINVOKE.Simulation_getLabel();
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void setOrder(int order) {
    libtraciPINVOKE.Simulation_setOrder(order);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void load(StringVector args) {
    libtraciPINVOKE.Simulation_load(StringVector.getCPtr(args));
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
  }

  public static bool hasGUI() {
    bool ret = libtraciPINVOKE.Simulation_hasGUI();
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool isLoaded() {
    bool ret = libtraciPINVOKE.Simulation_isLoaded();
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void step(double time) {
    libtraciPINVOKE.Simulation_step__SWIG_0(time);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void step() {
    libtraciPINVOKE.Simulation_step__SWIG_1();
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void executeMove() {
    libtraciPINVOKE.Simulation_executeMove();
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void close(string reason) {
    libtraciPINVOKE.Simulation_close__SWIG_0(reason);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void close() {
    libtraciPINVOKE.Simulation_close__SWIG_1();
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
  }

  public static IntStringPair getVersion() {
    IntStringPair ret = new IntStringPair(libtraciPINVOKE.Simulation_getVersion(), true);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string getOption(string option) {
    string ret = libtraciPINVOKE.Simulation_getOption(option);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int getCurrentTime() {
    int ret = libtraciPINVOKE.Simulation_getCurrentTime();
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getTime() {
    double ret = libtraciPINVOKE.Simulation_getTime();
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getEndTime() {
    double ret = libtraciPINVOKE.Simulation_getEndTime();
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int getLoadedNumber() {
    int ret = libtraciPINVOKE.Simulation_getLoadedNumber();
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static StringVector getLoadedIDList() {
    StringVector ret = new StringVector(libtraciPINVOKE.Simulation_getLoadedIDList(), true);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int getDepartedNumber() {
    int ret = libtraciPINVOKE.Simulation_getDepartedNumber();
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static StringVector getDepartedIDList() {
    StringVector ret = new StringVector(libtraciPINVOKE.Simulation_getDepartedIDList(), true);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int getArrivedNumber() {
    int ret = libtraciPINVOKE.Simulation_getArrivedNumber();
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static StringVector getArrivedIDList() {
    StringVector ret = new StringVector(libtraciPINVOKE.Simulation_getArrivedIDList(), true);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int getParkingStartingVehiclesNumber() {
    int ret = libtraciPINVOKE.Simulation_getParkingStartingVehiclesNumber();
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static StringVector getParkingStartingVehiclesIDList() {
    StringVector ret = new StringVector(libtraciPINVOKE.Simulation_getParkingStartingVehiclesIDList(), true);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int getParkingEndingVehiclesNumber() {
    int ret = libtraciPINVOKE.Simulation_getParkingEndingVehiclesNumber();
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static StringVector getParkingEndingVehiclesIDList() {
    StringVector ret = new StringVector(libtraciPINVOKE.Simulation_getParkingEndingVehiclesIDList(), true);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int getStopStartingVehiclesNumber() {
    int ret = libtraciPINVOKE.Simulation_getStopStartingVehiclesNumber();
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static StringVector getStopStartingVehiclesIDList() {
    StringVector ret = new StringVector(libtraciPINVOKE.Simulation_getStopStartingVehiclesIDList(), true);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int getStopEndingVehiclesNumber() {
    int ret = libtraciPINVOKE.Simulation_getStopEndingVehiclesNumber();
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static StringVector getStopEndingVehiclesIDList() {
    StringVector ret = new StringVector(libtraciPINVOKE.Simulation_getStopEndingVehiclesIDList(), true);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int getCollidingVehiclesNumber() {
    int ret = libtraciPINVOKE.Simulation_getCollidingVehiclesNumber();
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static StringVector getCollidingVehiclesIDList() {
    StringVector ret = new StringVector(libtraciPINVOKE.Simulation_getCollidingVehiclesIDList(), true);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int getEmergencyStoppingVehiclesNumber() {
    int ret = libtraciPINVOKE.Simulation_getEmergencyStoppingVehiclesNumber();
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static StringVector getEmergencyStoppingVehiclesIDList() {
    StringVector ret = new StringVector(libtraciPINVOKE.Simulation_getEmergencyStoppingVehiclesIDList(), true);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int getStartingTeleportNumber() {
    int ret = libtraciPINVOKE.Simulation_getStartingTeleportNumber();
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static StringVector getStartingTeleportIDList() {
    StringVector ret = new StringVector(libtraciPINVOKE.Simulation_getStartingTeleportIDList(), true);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int getEndingTeleportNumber() {
    int ret = libtraciPINVOKE.Simulation_getEndingTeleportNumber();
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static StringVector getEndingTeleportIDList() {
    StringVector ret = new StringVector(libtraciPINVOKE.Simulation_getEndingTeleportIDList(), true);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int getDepartedPersonNumber() {
    int ret = libtraciPINVOKE.Simulation_getDepartedPersonNumber();
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static StringVector getDepartedPersonIDList() {
    StringVector ret = new StringVector(libtraciPINVOKE.Simulation_getDepartedPersonIDList(), true);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int getArrivedPersonNumber() {
    int ret = libtraciPINVOKE.Simulation_getArrivedPersonNumber();
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static StringVector getArrivedPersonIDList() {
    StringVector ret = new StringVector(libtraciPINVOKE.Simulation_getArrivedPersonIDList(), true);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static StringVector getBusStopIDList() {
    StringVector ret = new StringVector(libtraciPINVOKE.Simulation_getBusStopIDList(), true);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int getBusStopWaiting(string stopID) {
    int ret = libtraciPINVOKE.Simulation_getBusStopWaiting(stopID);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static StringVector getBusStopWaitingIDList(string stopID) {
    StringVector ret = new StringVector(libtraciPINVOKE.Simulation_getBusStopWaitingIDList(stopID), true);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static StringVector getPendingVehicles() {
    StringVector ret = new StringVector(libtraciPINVOKE.Simulation_getPendingVehicles(), true);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TraCICollisionVector getCollisions() {
    TraCICollisionVector ret = new TraCICollisionVector(libtraciPINVOKE.Simulation_getCollisions(), true);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getScale() {
    double ret = libtraciPINVOKE.Simulation_getScale();
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getDeltaT() {
    double ret = libtraciPINVOKE.Simulation_getDeltaT();
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TraCIPositionVector getNetBoundary() {
    TraCIPositionVector ret = new TraCIPositionVector(libtraciPINVOKE.Simulation_getNetBoundary(), true);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int getMinExpectedNumber() {
    int ret = libtraciPINVOKE.Simulation_getMinExpectedNumber();
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TraCIPosition convert2D(string edgeID, double pos, int laneIndex, bool toGeo) {
    TraCIPosition ret = new TraCIPosition(libtraciPINVOKE.Simulation_convert2D__SWIG_0(edgeID, pos, laneIndex, toGeo), true);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TraCIPosition convert2D(string edgeID, double pos, int laneIndex) {
    TraCIPosition ret = new TraCIPosition(libtraciPINVOKE.Simulation_convert2D__SWIG_1(edgeID, pos, laneIndex), true);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TraCIPosition convert2D(string edgeID, double pos) {
    TraCIPosition ret = new TraCIPosition(libtraciPINVOKE.Simulation_convert2D__SWIG_2(edgeID, pos), true);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TraCIPosition convert3D(string edgeID, double pos, int laneIndex, bool toGeo) {
    TraCIPosition ret = new TraCIPosition(libtraciPINVOKE.Simulation_convert3D__SWIG_0(edgeID, pos, laneIndex, toGeo), true);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TraCIPosition convert3D(string edgeID, double pos, int laneIndex) {
    TraCIPosition ret = new TraCIPosition(libtraciPINVOKE.Simulation_convert3D__SWIG_1(edgeID, pos, laneIndex), true);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TraCIPosition convert3D(string edgeID, double pos) {
    TraCIPosition ret = new TraCIPosition(libtraciPINVOKE.Simulation_convert3D__SWIG_2(edgeID, pos), true);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TraCIRoadPosition convertRoad(double x, double y, bool isGeo, string vClass) {
    TraCIRoadPosition ret = new TraCIRoadPosition(libtraciPINVOKE.Simulation_convertRoad__SWIG_0(x, y, isGeo, vClass), true);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TraCIRoadPosition convertRoad(double x, double y, bool isGeo) {
    TraCIRoadPosition ret = new TraCIRoadPosition(libtraciPINVOKE.Simulation_convertRoad__SWIG_1(x, y, isGeo), true);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TraCIRoadPosition convertRoad(double x, double y) {
    TraCIRoadPosition ret = new TraCIRoadPosition(libtraciPINVOKE.Simulation_convertRoad__SWIG_2(x, y), true);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TraCIPosition convertGeo(double x, double y, bool fromGeo) {
    TraCIPosition ret = new TraCIPosition(libtraciPINVOKE.Simulation_convertGeo__SWIG_0(x, y, fromGeo), true);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TraCIPosition convertGeo(double x, double y) {
    TraCIPosition ret = new TraCIPosition(libtraciPINVOKE.Simulation_convertGeo__SWIG_1(x, y), true);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getDistance2D(double x1, double y1, double x2, double y2, bool isGeo, bool isDriving) {
    double ret = libtraciPINVOKE.Simulation_getDistance2D__SWIG_0(x1, y1, x2, y2, isGeo, isDriving);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getDistance2D(double x1, double y1, double x2, double y2, bool isGeo) {
    double ret = libtraciPINVOKE.Simulation_getDistance2D__SWIG_1(x1, y1, x2, y2, isGeo);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getDistance2D(double x1, double y1, double x2, double y2) {
    double ret = libtraciPINVOKE.Simulation_getDistance2D__SWIG_2(x1, y1, x2, y2);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getDistanceRoad(string edgeID1, double pos1, string edgeID2, double pos2, bool isDriving) {
    double ret = libtraciPINVOKE.Simulation_getDistanceRoad__SWIG_0(edgeID1, pos1, edgeID2, pos2, isDriving);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getDistanceRoad(string edgeID1, double pos1, string edgeID2, double pos2) {
    double ret = libtraciPINVOKE.Simulation_getDistanceRoad__SWIG_1(edgeID1, pos1, edgeID2, pos2);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TraCIStage findRoute(string fromEdge, string toEdge, string vType, double depart, int routingMode) {
    TraCIStage ret = new TraCIStage(libtraciPINVOKE.Simulation_findRoute__SWIG_0(fromEdge, toEdge, vType, depart, routingMode), true);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TraCIStage findRoute(string fromEdge, string toEdge, string vType, double depart) {
    TraCIStage ret = new TraCIStage(libtraciPINVOKE.Simulation_findRoute__SWIG_1(fromEdge, toEdge, vType, depart), true);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TraCIStage findRoute(string fromEdge, string toEdge, string vType) {
    TraCIStage ret = new TraCIStage(libtraciPINVOKE.Simulation_findRoute__SWIG_2(fromEdge, toEdge, vType), true);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TraCIStage findRoute(string fromEdge, string toEdge) {
    TraCIStage ret = new TraCIStage(libtraciPINVOKE.Simulation_findRoute__SWIG_3(fromEdge, toEdge), true);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TraCIStageVector findIntermodalRoute(string fromEdge, string toEdge, string modes, double depart, int routingMode, double speed, double walkFactor, double departPos, double arrivalPos, double departPosLat, string pType, string vType, string destStop) {
    TraCIStageVector ret = new TraCIStageVector(libtraciPINVOKE.Simulation_findIntermodalRoute__SWIG_0(fromEdge, toEdge, modes, depart, routingMode, speed, walkFactor, departPos, arrivalPos, departPosLat, pType, vType, destStop), true);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TraCIStageVector findIntermodalRoute(string fromEdge, string toEdge, string modes, double depart, int routingMode, double speed, double walkFactor, double departPos, double arrivalPos, double departPosLat, string pType, string vType) {
    TraCIStageVector ret = new TraCIStageVector(libtraciPINVOKE.Simulation_findIntermodalRoute__SWIG_1(fromEdge, toEdge, modes, depart, routingMode, speed, walkFactor, departPos, arrivalPos, departPosLat, pType, vType), true);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TraCIStageVector findIntermodalRoute(string fromEdge, string toEdge, string modes, double depart, int routingMode, double speed, double walkFactor, double departPos, double arrivalPos, double departPosLat, string pType) {
    TraCIStageVector ret = new TraCIStageVector(libtraciPINVOKE.Simulation_findIntermodalRoute__SWIG_2(fromEdge, toEdge, modes, depart, routingMode, speed, walkFactor, departPos, arrivalPos, departPosLat, pType), true);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TraCIStageVector findIntermodalRoute(string fromEdge, string toEdge, string modes, double depart, int routingMode, double speed, double walkFactor, double departPos, double arrivalPos, double departPosLat) {
    TraCIStageVector ret = new TraCIStageVector(libtraciPINVOKE.Simulation_findIntermodalRoute__SWIG_3(fromEdge, toEdge, modes, depart, routingMode, speed, walkFactor, departPos, arrivalPos, departPosLat), true);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TraCIStageVector findIntermodalRoute(string fromEdge, string toEdge, string modes, double depart, int routingMode, double speed, double walkFactor, double departPos, double arrivalPos) {
    TraCIStageVector ret = new TraCIStageVector(libtraciPINVOKE.Simulation_findIntermodalRoute__SWIG_4(fromEdge, toEdge, modes, depart, routingMode, speed, walkFactor, departPos, arrivalPos), true);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TraCIStageVector findIntermodalRoute(string fromEdge, string toEdge, string modes, double depart, int routingMode, double speed, double walkFactor, double departPos) {
    TraCIStageVector ret = new TraCIStageVector(libtraciPINVOKE.Simulation_findIntermodalRoute__SWIG_5(fromEdge, toEdge, modes, depart, routingMode, speed, walkFactor, departPos), true);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TraCIStageVector findIntermodalRoute(string fromEdge, string toEdge, string modes, double depart, int routingMode, double speed, double walkFactor) {
    TraCIStageVector ret = new TraCIStageVector(libtraciPINVOKE.Simulation_findIntermodalRoute__SWIG_6(fromEdge, toEdge, modes, depart, routingMode, speed, walkFactor), true);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TraCIStageVector findIntermodalRoute(string fromEdge, string toEdge, string modes, double depart, int routingMode, double speed) {
    TraCIStageVector ret = new TraCIStageVector(libtraciPINVOKE.Simulation_findIntermodalRoute__SWIG_7(fromEdge, toEdge, modes, depart, routingMode, speed), true);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TraCIStageVector findIntermodalRoute(string fromEdge, string toEdge, string modes, double depart, int routingMode) {
    TraCIStageVector ret = new TraCIStageVector(libtraciPINVOKE.Simulation_findIntermodalRoute__SWIG_8(fromEdge, toEdge, modes, depart, routingMode), true);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TraCIStageVector findIntermodalRoute(string fromEdge, string toEdge, string modes, double depart) {
    TraCIStageVector ret = new TraCIStageVector(libtraciPINVOKE.Simulation_findIntermodalRoute__SWIG_9(fromEdge, toEdge, modes, depart), true);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TraCIStageVector findIntermodalRoute(string fromEdge, string toEdge, string modes) {
    TraCIStageVector ret = new TraCIStageVector(libtraciPINVOKE.Simulation_findIntermodalRoute__SWIG_10(fromEdge, toEdge, modes), true);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TraCIStageVector findIntermodalRoute(string fromEdge, string toEdge) {
    TraCIStageVector ret = new TraCIStageVector(libtraciPINVOKE.Simulation_findIntermodalRoute__SWIG_11(fromEdge, toEdge), true);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string getParameter(string objectID, string key) {
    string ret = libtraciPINVOKE.Simulation_getParameter(objectID, key);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static StringStringPair getParameterWithKey(string objectID, string key) {
    StringStringPair ret = new StringStringPair(libtraciPINVOKE.Simulation_getParameterWithKey(objectID, key), true);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void setParameter(string objectID, string key, string value) {
    libtraciPINVOKE.Simulation_setParameter(objectID, key, value);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setScale(double value) {
    libtraciPINVOKE.Simulation_setScale(value);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void clearPending(string routeID) {
    libtraciPINVOKE.Simulation_clearPending__SWIG_0(routeID);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void clearPending() {
    libtraciPINVOKE.Simulation_clearPending__SWIG_1();
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void saveState(string fileName) {
    libtraciPINVOKE.Simulation_saveState(fileName);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
  }

  public static double loadState(string fileName) {
    double ret = libtraciPINVOKE.Simulation_loadState(fileName);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void writeMessage(string msg) {
    libtraciPINVOKE.Simulation_writeMessage(msg);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void subscribe(string objectID, IntVector varIDs, double begin, double end, TraCIResults parameters) {
    libtraciPINVOKE.Simulation_subscribe__SWIG_0(objectID, IntVector.getCPtr(varIDs), begin, end, TraCIResults.getCPtr(parameters));
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void subscribe(string objectID, IntVector varIDs, double begin, double end) {
    libtraciPINVOKE.Simulation_subscribe__SWIG_1(objectID, IntVector.getCPtr(varIDs), begin, end);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void subscribe(string objectID, IntVector varIDs, double begin) {
    libtraciPINVOKE.Simulation_subscribe__SWIG_2(objectID, IntVector.getCPtr(varIDs), begin);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void subscribe(string objectID, IntVector varIDs) {
    libtraciPINVOKE.Simulation_subscribe__SWIG_3(objectID, IntVector.getCPtr(varIDs));
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void subscribe(string objectID) {
    libtraciPINVOKE.Simulation_subscribe__SWIG_4(objectID);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void unsubscribe(string objectID) {
    libtraciPINVOKE.Simulation_unsubscribe(objectID);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void subscribeContext(string objectID, int domain, double dist, IntVector varIDs, double begin, double end, TraCIResults parameters) {
    libtraciPINVOKE.Simulation_subscribeContext__SWIG_0(objectID, domain, dist, IntVector.getCPtr(varIDs), begin, end, TraCIResults.getCPtr(parameters));
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void subscribeContext(string objectID, int domain, double dist, IntVector varIDs, double begin, double end) {
    libtraciPINVOKE.Simulation_subscribeContext__SWIG_1(objectID, domain, dist, IntVector.getCPtr(varIDs), begin, end);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void subscribeContext(string objectID, int domain, double dist, IntVector varIDs, double begin) {
    libtraciPINVOKE.Simulation_subscribeContext__SWIG_2(objectID, domain, dist, IntVector.getCPtr(varIDs), begin);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void subscribeContext(string objectID, int domain, double dist, IntVector varIDs) {
    libtraciPINVOKE.Simulation_subscribeContext__SWIG_3(objectID, domain, dist, IntVector.getCPtr(varIDs));
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void subscribeContext(string objectID, int domain, double dist) {
    libtraciPINVOKE.Simulation_subscribeContext__SWIG_4(objectID, domain, dist);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void unsubscribeContext(string objectID, int domain, double dist) {
    libtraciPINVOKE.Simulation_unsubscribeContext(objectID, domain, dist);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
  }

  public static SubscriptionResults getAllSubscriptionResults() {
    SubscriptionResults ret = new SubscriptionResults(libtraciPINVOKE.Simulation_getAllSubscriptionResults(), true);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TraCIResults getSubscriptionResults(string objectID) {
    TraCIResults ret = new TraCIResults(libtraciPINVOKE.Simulation_getSubscriptionResults__SWIG_0(objectID), true);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ContextSubscriptionResults getAllContextSubscriptionResults() {
    ContextSubscriptionResults ret = new ContextSubscriptionResults(libtraciPINVOKE.Simulation_getAllContextSubscriptionResults(), true);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SubscriptionResults getContextSubscriptionResults(string objectID) {
    SubscriptionResults ret = new SubscriptionResults(libtraciPINVOKE.Simulation_getContextSubscriptionResults(objectID), true);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void subscribeParameterWithKey(string objectID, string key, double beginTime, double endTime) {
    libtraciPINVOKE.Simulation_subscribeParameterWithKey__SWIG_0(objectID, key, beginTime, endTime);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void subscribeParameterWithKey(string objectID, string key, double beginTime) {
    libtraciPINVOKE.Simulation_subscribeParameterWithKey__SWIG_1(objectID, key, beginTime);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void subscribeParameterWithKey(string objectID, string key) {
    libtraciPINVOKE.Simulation_subscribeParameterWithKey__SWIG_2(objectID, key);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int DOMAIN_ID {
    get {
      int ret = libtraciPINVOKE.Simulation_DOMAIN_ID_get();
      if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int domainID() {
    int ret = libtraciPINVOKE.Simulation_domainID();
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void subscribe(IntVector varIDs, double begin, double end, TraCIResults parameters) {
    libtraciPINVOKE.Simulation_subscribe__SWIG_5(IntVector.getCPtr(varIDs), begin, end, TraCIResults.getCPtr(parameters));
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void subscribe(IntVector varIDs, double begin, double end) {
    libtraciPINVOKE.Simulation_subscribe__SWIG_6(IntVector.getCPtr(varIDs), begin, end);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void subscribe(IntVector varIDs, double begin) {
    libtraciPINVOKE.Simulation_subscribe__SWIG_7(IntVector.getCPtr(varIDs), begin);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void subscribe(IntVector varIDs) {
    libtraciPINVOKE.Simulation_subscribe__SWIG_8(IntVector.getCPtr(varIDs));
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void subscribe() {
    libtraciPINVOKE.Simulation_subscribe__SWIG_9();
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
  }

  public static TraCIResults getSubscriptionResults() {
    TraCIResults ret = new TraCIResults(libtraciPINVOKE.Simulation_getSubscriptionResults__SWIG_1(), true);
    if (libtraciPINVOKE.SWIGPendingException.Pending) throw libtraciPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
